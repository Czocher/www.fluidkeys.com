---
title: Master PGP for your team with Fluidkeys
---

<header class="typeset">
  <h1>Fluidkeys</h1>
</header>

<section class="typeset hero">
  <div class="container">
    <div class="content">
      <h1>Master PGP for your team</h1>
      <p>Implement best security practices and demonstrate your team’s expertise with PGP.</p>
      <%= partial "signup_form", locals: { form_id: "header-sign-up" } %>
    </div>
    <div class="illustration">
      <%= image_tag 'github.png', alt: 'Screenshots of signed emails and code commits.' %>
    </div>
  </div>
</section>

<section class="typeset challenge">
  <div class="container">
    <h2>Supporting PGP in a team is time consuming and error&#8209;prone</h2>
    <div class="content">
      <p>The steep learning curve means supporting new team members is time consuming and costly.
      <p>Keys get out of sync, leading to confusing errors. Verifying, retrieving and refreshing keys is a repetitive, manual process.
      <p>A lack of agreed best practice means lots of keys use old, insecure algorithms. Auditing a team’s keys often gets forgotten.</p>
    </div>
    <div class="illustration">
      <%= image_tag 'pain.png', alt: "An illustration of the world of pain and confusion managing PGP." %>
    </div>

  </div>
</section>

<section class="typeset solution">
  <div class="container">
    <div class="content">
      <h2 style="padding-bottom: 1rem;">Automate PGP for stronger, simpler&nbsp;security</h2>
      <%= image_tag "fluidkeys-command-line.gif", class: "screencast", alt: 'An animation of the command line interface for Fluidkeys' %>
    </div>
  </div>
</section>

<section class="typeset features">
  <div class="container">
    <div class="feature">
      <%= image_tag 'new-team-member.svg', alt: 'Icon for a new key and backup' %>
      <h3>Onboard new team members</h3>
      <p>Guide new starters through generating a key, creating encrypted backups and revocation certificates.</p>
    </div>
    <div class="feature">
      <%= image_tag 'sync.svg', alt: 'Icon for syncronising keys' %>
      <h3>Keep your team in sync</h3>
      <p>Automatically update keys and sync across the team. Starters and leavers are added and removed seamlessly.</p>
    </div>
    <div class="feature">
      <%= image_tag 'best.svg', alt: 'Icon for the best key' %>
      <h3>Audit keys against best practice</h3>
      <p>Use strong ciphers, short expiries and clear certification policies on all the teams' keys.</p>
    </div>
    <div class="feature">
      <%= image_tag 'imposter.svg', alt: 'Icon for an imposter' %>
      <h3>Look out for imposters!</h3>
      <p>Get alerted for any new keys claiming to be @yourdomain.com</p>
    </div>
    <div class="feature">
      <%= image_tag 'signed.svg', alt: 'Icon for signed code commits' %>
      <h3>Enforce Github signed commits</h3>
      <p>Monitor code repositories to ensure all code is correctly signed.</p>
    </div>
    <div class="feature">
      <%= image_tag 'rotate.svg', alt: 'Icon for a key with an expiry date' %>
      <h3>Rotate keys periodically</h3>
      <p>Automatically generate new encryption keys every quarter for forward secrecy.</p>
    </div>
  </div>

</section>

<section class="typeset final-cta">
  <div class="container">
    <h2>Sign up for early access and get a free report about your team’s PGP&nbsp;practices</h2>
    <%= partial "signup_form", locals: { form_id: "footer-sign-up" } %>
  </div>
</section>

<script>

function ready(fn) {
  if (document.attachEvent ? document.readyState === "complete" : document.readyState !== "loading"){
    fn();
  } else {
    document.addEventListener('DOMContentLoaded', fn);
  }
}

function setupEventHandlers() {
  var forms = document.getElementsByTagName('form');
  for(var i = 0 ; i < forms.length ; ++i) {
    forms[i].addEventListener('submit', handleFormSubmit);
  }
}

function handleFormSubmit(event) {
  // this is a bit tricksy, since submitting forms causes the page to unload
  // and stop javascript running.
  // See:
  // https://developers.google.com/analytics/devguides/collection/analyticsjs/sending-hits#knowing_when_the_hit_has_been_sent

  var form = event.target,
      // Keeps track of whether or not the form has been submitted.
      // This prevents the form from being submitted twice in cases
      // where `hitCallback` fires normally.
      formSubmitted = false;

  // Prevents the browser from submitting the form
  // and thus unloading the current page.
  event.preventDefault();

  setTimeout(submitForm, 1000);  // in case the GA hit callback never fires

  function submitForm() {
    if (!formSubmitted) {
      formSubmitted = true;
      console.log("calling form.submit()");
      form.submit();
    }
  }

  ga('send', 'event', {
    eventCategory: 'Sign up form',
    eventAction: 'form_submit',
    eventLabel: form.id,
    hitCallback: function() {
      console.debug("Got GA event hit callback");
      submitForm();
    }
  });

}

ready(setupEventHandlers);

</script>